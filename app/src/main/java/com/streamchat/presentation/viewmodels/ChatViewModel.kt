package com.streamchat.presentation.viewmodels

import android.util.Log
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.streamchat.data.remote.YouTubeApiService
import com.streamchat.domain.model.ChatMessage
import com.streamchat.domain.model.MessageType
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ChatViewModel @Inject constructor(
    private val youTubeApiService: YouTubeApiService
) : ViewModel() {
    
    private val _allMessages = MutableStateFlow<List<ChatMessage>>(emptyList())
    val allMessages: StateFlow<List<ChatMessage>> = _allMessages
    
    private val _questions = MutableStateFlow<List<ChatMessage>>(emptyList())
    val questions: StateFlow<List<ChatMessage>> = _questions
    
    private val _gratitude = MutableStateFlow<List<ChatMessage>>(emptyList())
    val gratitude: StateFlow<List<ChatMessage>> = _gratitude
    
    private val _negative = MutableStateFlow<List<ChatMessage>>(emptyList())
    val negative: StateFlow<List<ChatMessage>> = _negative
    
    private val _personalQuestions = MutableStateFlow<List<ChatMessage>>(emptyList())
    val personalQuestions: StateFlow<List<ChatMessage>> = _personalQuestions
    
    private val _chatMood = MutableStateFlow(0.0f)
    val chatMood: StateFlow<Float> = _chatMood
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading
    
    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error
    
    private var currentVideoId: String? = null
    
    fun connectToChat(streamUrl: String) {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                _isLoading.value = true
                _error.value = null
                
                val videoId = youTubeApiService.extractVideoId(streamUrl)
                currentVideoId = videoId
                youTubeApiService.connectToLiveChat(videoId)
                startMessageProcessing()
                
                _isLoading.value = false
            } catch (e: Exception) {
                _isLoading.value = false
                Log.e("StreamChat", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É: ${e.message}", e)
                _error.value = e.message ?: "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
            }
        }
    }
    
    private fun extractVideoId(url: String): String? {
        Log.v("StreamChat", "üîç –°–ø—Ä–æ–±–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ ID –≤—ñ–¥–µ–æ –∑ URL: '$url'")
        val pattern = "(?:live/|v=|/)([a-zA-Z0-9_-]+)".toRegex()
        val result = pattern.find(url)?.groupValues?.get(1)
        Log.v("StreamChat", "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è ID: '$result'")
        return result
    }
    
    private fun startMessageProcessing() {
        viewModelScope.launch {
            try {
                youTubeApiService.chatMessages.collect { message ->
                    Log.v("StreamChat", "üì® –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message.content}")
                    processMessage(message)
                }
            } catch (e: Exception) {
                Log.e("StreamChat", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${e.message}", e)
                _error.value = "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${e.message}"
            }
        }
    }
    
    private fun processMessage(message: ChatMessage) {
        viewModelScope.launch {
            try {
                val currentMessages = _allMessages.value.toMutableList()
                currentMessages.add(0, message)
                
                // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–∞–º'—è—Ç—ñ
                if (currentMessages.size > 100) {
                    currentMessages.removeAt(currentMessages.size - 1)
                }
                
                _allMessages.value = currentMessages
                
                Log.v("StreamChat", "üìù –û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –í—Å—å–æ–≥–æ: ${currentMessages.size}")

                when {
                    isQuestion(message.content) -> {
                        _questions.value = _questions.value + message
                        Log.v("StreamChat", "‚ùì –î–æ–¥–∞–Ω–æ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è")
                    }
                    isGratitude(message.content) -> {
                        _gratitude.value = _gratitude.value + message
                        updateChatMood(0.1f)
                        Log.v("StreamChat", "üôè –î–æ–¥–∞–Ω–æ –Ω–æ–≤—É –ø–æ–¥—è–∫—É")
                    }
                    isNegative(message.content) -> {
                        _negative.value = _negative.value + message
                        updateChatMood(-0.1f)
                        Log.v("StreamChat", "üò† –î–æ–¥–∞–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                    }
                    isPersonalQuestion(message.content) -> {
                        _personalQuestions.value = _personalQuestions.value + message
                        Log.v("StreamChat", "üë§ –î–æ–¥–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è")
                    }
                }
            } catch (e: Exception) {
                Log.e("StreamChat", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${e.message}", e)
            }
        }
    }
    
    private fun updateChatMood(delta: Float) {
        _chatMood.value = (_chatMood.value + delta).coerceIn(-1f, 1f)
    }
    
    private fun isQuestion(content: String): Boolean {
        return content.contains(Regex("[?]|—â–æ|—è–∫|—á–æ–º—É|–∫–æ–ª–∏|–¥–µ|—Ö—Ç–æ|–Ω–∞–≤—ñ—â–æ|—á–∏|—è–∫–∏–π", RegexOption.IGNORE_CASE))
    }
    
    private fun isPersonalQuestion(content: String): Boolean {
        return content.contains(Regex("@|–∑–≥–∞–¥–∞–≤|–∑–≥–∞–¥–∞–ª–∞", RegexOption.IGNORE_CASE))
    }
    
    private fun isGratitude(content: String): Boolean {
        return content.contains(Regex("–¥—è–∫—É—é|—Å–ø–∞—Å–∏–±—ñ|–¥—è–∫|–∫—Ä–∞—Å–Ω–æ|–≤–¥—è—á–Ω–∏–π|–≤–¥—è—á–Ω–∞", RegexOption.IGNORE_CASE))
    }
    
    private fun isNegative(content: String): Boolean {
        return content.contains(Regex("–ø–æ–≥–∞–Ω–∏–π|–∂–∞—Ö–ª–∏–≤–æ|–∂–∞—Ö|–ø–æ–≥–∞–Ω–æ|–Ω–µ–≥–∞—Ç–∏–≤|–∑–ª–µ|–±—Ä–∏–¥–∫–æ", RegexOption.IGNORE_CASE))
    }
    
    override fun onCleared() {
        super.onCleared()
        viewModelScope.launch {
            currentVideoId?.let {
                youTubeApiService.disconnectFromLiveChat()
            }
        }
    }
} 