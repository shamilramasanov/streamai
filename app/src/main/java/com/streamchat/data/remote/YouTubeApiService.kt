package com.streamchat.data.remote

import android.util.Log
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport
import com.google.api.client.json.gson.GsonFactory
import com.google.api.services.youtube.YouTube
import com.streamchat.core.Constants
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import javax.inject.Inject
import javax.inject.Singleton
import java.util.regex.Pattern
import com.streamchat.domain.model.ChatMessage
import com.streamchat.domain.model.MessageType

@Singleton
class YouTubeApiService @Inject constructor() {
    companion object {
        private const val TAG = Constants.LOG_TAG
    }

    init {
        println("üöÄ YouTubeApiService: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É")
        Log.v(TAG, "üöÄ YouTubeApiService: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É")
        Log.d(TAG, "üöÄ YouTubeApiService: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É")
        Log.i(TAG, "üöÄ YouTubeApiService: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É")
        Log.e(TAG, "üöÄ YouTubeApiService: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É")
        
        try {
            initializeYouTubeClient()
        } catch (e: Exception) {
            println("‚ùå YouTubeApiService: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${e.message}")
            Log.v(TAG, "‚ùå YouTubeApiService: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${e.message}")
            Log.e(TAG, "‚ùå YouTubeApiService: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${e.message}")
            Log.e(TAG, "‚ùå –°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏: ${e.stackTraceToString()}")
        }
    }

    private val scope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
    private var chatPollingJob: Job? = null
    private val _messages = MutableStateFlow<List<ChatMessageDto>>(emptyList())
    val messages = _messages.asStateFlow()
    
    private var youtube: YouTube? = null
    private var retryCount = 0
    
    private val _chatMessages = MutableSharedFlow<ChatMessage>()
    val chatMessages: SharedFlow<ChatMessage> = _chatMessages

    private fun initializeYouTubeClient() {
        println("üöÄ YouTubeApiService: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞")
        Log.v(TAG, "üöÄ YouTubeApiService: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞")
        Log.d(TAG, "üöÄ YouTubeApiService: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞")
        Log.i(TAG, "üöÄ YouTubeApiService: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞")
        Log.e(TAG, "üöÄ YouTubeApiService: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞")
        
        try {
            println("üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é API –∫–ª—é—á: ${Constants.YOUTUBE_API_KEY}")
            Log.v(TAG, "üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é API –∫–ª—é—á: ${Constants.YOUTUBE_API_KEY}")
            Log.d(TAG, "üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é API –∫–ª—é—á: ${Constants.YOUTUBE_API_KEY}")
            
            youtube = YouTube.Builder(
                GoogleNetHttpTransport.newTrustedTransport(),
                GsonFactory.getDefaultInstance(),
                null
            )
                .setApplicationName(Constants.APPLICATION_NAME)
                .build()
                .also { 
                    println("‚úÖ YouTubeApiService: –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                    Log.v(TAG, "‚úÖ YouTubeApiService: –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                    Log.d(TAG, "‚úÖ YouTubeApiService: –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                    Log.i(TAG, "‚úÖ YouTubeApiService: –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                    retryCount = 0
                }
        } catch (e: Exception) {
            retryCount++
            println("‚ùå YouTubeApiService: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ (—Å–ø—Ä–æ–±–∞ $retryCount): ${e.message}")
            Log.v(TAG, "‚ùå YouTubeApiService: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ (—Å–ø—Ä–æ–±–∞ $retryCount): ${e.message}")
            Log.e(TAG, "‚ùå YouTubeApiService: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ (—Å–ø—Ä–æ–±–∞ $retryCount): ${e.message}")
            Log.e(TAG, "‚ùå –°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏: ${e.stackTraceToString()}")
            
            if (retryCount < Constants.MAX_RETRIES) {
                println("üîÑ YouTubeApiService: –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
                Log.v(TAG, "üîÑ YouTubeApiService: –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
                Log.i(TAG, "üîÑ YouTubeApiService: –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
                Thread.sleep(1000)
                initializeYouTubeClient()
            } else {
                throw e
            }
        }
    }

    fun extractVideoId(url: String): String {
        Log.v("StreamChat", "üîç –°–ø—Ä–æ–±–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ ID –≤—ñ–¥–µ–æ –∑ URL: '$url'")
        
        val patterns = listOf(
            "(?<=live/)([\\w-]+)".toRegex(),
            "(?<=v=)([\\w-]+)".toRegex(),
            "(?<=youtu.be/)([\\w-]+)".toRegex(),
            "(?<=embed/)([\\w-]+)".toRegex()
        )
        
        for (pattern in patterns) {
            pattern.find(url)?.value?.let { id ->
                Log.v("StreamChat", "üéØ –ó–Ω–∞–π–¥–µ–Ω–æ ID: '$id' –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞—Ç–µ—Ä–Ω—É: $pattern")
                return id
            }
        }
        
        Log.e("StreamChat", "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ ID –≤—ñ–¥–µ–æ –∑ URL: '$url'")
        throw IllegalArgumentException("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL –≤—ñ–¥–µ–æ")
    }

    fun isValidYouTubeUrl(url: String): Boolean {
        val isValid = url.contains("youtube.com") || url.contains("youtu.be")
        println("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL '$url': ${if (isValid) "‚úÖ –≤–∞–ª—ñ–¥–Ω–∏–π" else "‚ùå –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π"}")
        Log.e(TAG, "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL '$url': ${if (isValid) "‚úÖ –≤–∞–ª—ñ–¥–Ω–∏–π" else "‚ùå –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π"}")
        return isValid
    }

    suspend fun connectToLiveChat(videoId: String) {
        try {
            println("üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–µ–æ ID: $videoId")
            Log.e(TAG, "üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–µ–æ ID: $videoId")
            
            if (youtube == null) {
                println("‚ùå YouTube –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
                Log.e(TAG, "‚ùå YouTube –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
                initializeYouTubeClient()
            }
            
            val liveChatId = getLiveChatId(videoId)
            if (liveChatId == null) {
                val error = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–µ–æ $videoId"
                println(error)
                Log.e(TAG, error)
                throw IllegalStateException(error)
            }
            
            println("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ID —á–∞—Ç—É: $liveChatId")
            Log.e(TAG, "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ID —á–∞—Ç—É: $liveChatId")
            startChatPolling(liveChatId)
            
        } catch (e: Exception) {
            println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É: ${e.message}")
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É: ${e.message}")
            Log.e(TAG, "‚ùå –°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏: ${e.stackTraceToString()}")
            throw e
        }
    }

    private suspend fun getLiveChatId(videoId: String): String? {
        return try {
            println("üîÑ –ó–∞–ø–∏—Ç ID —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–µ–æ: $videoId")
            Log.e(TAG, "üîÑ –ó–∞–ø–∏—Ç ID —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–µ–æ: $videoId")
            
            val request = youtube?.videos()
                ?.list(listOf("liveStreamingDetails"))
                ?.setKey(Constants.YOUTUBE_API_KEY)
                ?.setId(listOf(videoId))
                
            if (request == null) {
                println("‚ùå YouTube –∫–ª—ñ—î–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤–∏–π")
                Log.e(TAG, "‚ùå YouTube –∫–ª—ñ—î–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤–∏–π")
                return null
            }
            
            println("üì° –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ YouTube API...")
            Log.e(TAG, "üì° –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ YouTube API...")
            val response = request.execute()
            println("üìù –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.toPrettyString()}")
            Log.e(TAG, "üìù –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.toPrettyString()}")

            val chatId = response.items?.firstOrNull()?.liveStreamingDetails?.activeLiveChatId
            if (chatId == null) {
                println("‚ùå –ß–∞—Ç ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API")
                Log.e(TAG, "‚ùå –ß–∞—Ç ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API")
                println("üìù –î–µ—Ç–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.toPrettyString()}")
                Log.e(TAG, "üìù –î–µ—Ç–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.toPrettyString()}")
            } else {
                println("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ ID —á–∞—Ç—É: $chatId")
                Log.e(TAG, "‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ ID —á–∞—Ç—É: $chatId")
            }
            chatId
            
        } catch (e: Exception) {
            println("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —á–∞—Ç—É: ${e.message}")
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —á–∞—Ç—É: ${e.message}")
            Log.e(TAG, "‚ùå –°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏: ${e.stackTraceToString()}")
            null
        }
    }

    private fun startChatPolling(liveChatId: String) {
        Log.e(TAG, "üîÑ –ó–∞–ø—É—Å–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É –¥–ª—è ID: $liveChatId")
        chatPollingJob?.cancel()
        
        chatPollingJob = scope.launch {
            var nextPageToken: String? = null
            
            while (isActive) {
                try {
                    val response = getLiveChatMessages(liveChatId, nextPageToken)
                    Log.e(TAG, "üìù –û—Ç—Ä–∏–º–∞–Ω–æ ${response.messages.size} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
                    
                    response.messages.forEach { messageDto ->
                        _chatMessages.emit(ChatMessage(
                            id = messageDto.id,
                            authorName = messageDto.authorName,
                            content = messageDto.content,
                            timestamp = messageDto.timestamp,
                            messageType = MessageType.REGULAR
                        ))
                    }
                    
                    nextPageToken = response.nextPageToken
                    Log.e(TAG, "‚è±Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ ${response.pollingIntervalMillis}–º—Å")
                    delay(response.pollingIntervalMillis)
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ —á–∞—Ç—É: ${e.message}")
                    Log.e(TAG, "‚ùå –°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏: ${e.stackTraceToString()}")
                    delay(5000)
                }
            }
        }
    }

    private suspend fun getLiveChatMessages(liveChatId: String, pageToken: String? = null): LiveChatMessagesResponse {
        return try {
            Log.e(TAG, "üîÑ –ó–∞–ø–∏—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É –¥–ª—è ID: $liveChatId")
            if (pageToken != null) {
                Log.e(TAG, "üìÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è pageToken: $pageToken")
            }
            
            val request = youtube?.liveChatMessages()
                ?.list(liveChatId, listOf("snippet", "authorDetails"))
                ?.setKey(Constants.YOUTUBE_API_KEY)
                ?.setMaxResults(200L)
                ?.apply { 
                    if (pageToken != null) {
                        this.pageToken = pageToken
                    }
                }

            if (request == null) {
                Log.e(TAG, "‚ùå YouTube –∫–ª—ñ—î–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤–∏–π")
                return LiveChatMessagesResponse(emptyList(), null, 5000)
            }
            
            Log.e(TAG, "üì° –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
            val response = request.execute()
            Log.e(TAG, "üìù –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.toPrettyString()}")

            LiveChatMessagesResponse(
                messages = response.items?.map { item ->
                    ChatMessageDto(
                        id = item.id,
                        authorName = item.authorDetails.displayName,
                        content = item.snippet.displayMessage,
                        timestamp = System.currentTimeMillis(),
                        messageType = MessageType.REGULAR
                    )
                } ?: emptyList(),
                nextPageToken = response.nextPageToken,
                pollingIntervalMillis = response.pollingIntervalMillis
            )
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É: ${e.message}")
            Log.e(TAG, "‚ùå –°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏: ${e.stackTraceToString()}")
            LiveChatMessagesResponse(emptyList(), null, 5000)
        }
    }

    suspend fun disconnectFromLiveChat() {
        Log.e(TAG, "üîÑ –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ —á–∞—Ç—É")
        chatPollingJob?.cancel()
        chatPollingJob = null
        _messages.value = emptyList()
    }
}

data class LiveChatMessagesResponse(
    val messages: List<ChatMessageDto>,
    val nextPageToken: String?,
    val pollingIntervalMillis: Long
)

data class ChatMessageDto(
    val id: String,
    val authorName: String,
    val content: String,
    val timestamp: Long,
    val messageType: MessageType
) 