package com.streamchat.platforms.tiktok

import com.streamchat.platforms.tiktok.model.TikTokMessage
import com.streamchat.platforms.tiktok.model.MessageData
import com.streamchat.platforms.tiktok.model.TikTokUser
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.receiveAsFlow
import okhttp3.*
import timber.log.Timber
import javax.inject.Inject
import javax.inject.Singleton
import org.json.JSONObject
import java.util.concurrent.TimeUnit

@Singleton
class TikTokWebSocketImpl @Inject constructor() : TikTokWebSocket {
    private var webSocket: WebSocket? = null
    private val messageChannel = Channel<TikTokMessage>(Channel.UNLIMITED)
    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .retryOnConnectionFailure(true)
        .build()

    override val messages: Flow<TikTokMessage> = messageChannel.receiveAsFlow()

    override suspend fun connect(username: String) {
        try {
            Timber.d("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ TikTok Live –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $username")
            
            val request = Request.Builder()
                .url("wss://tiktok-chat-proxy.zerody.one/live/$username")
                .build()

            Timber.d("üì° –°—Ç–≤–æ—Ä—é—î–º–æ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ URL: ${request.url}")

            webSocket = client.newWebSocket(request, object : WebSocketListener() {
                override fun onOpen(webSocket: WebSocket, response: Response) {
                    Timber.d("‚úÖ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ. –ö–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.code}")
                }

                override fun onMessage(webSocket: WebSocket, text: String) {
                    try {
                        Timber.d("üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: $text")
                        val json = JSONObject(text)
                        when (json.getString("type")) {
                            "chat" -> {
                                val data = json.getJSONObject("data")
                                val user = data.getJSONObject("user")
                                val message = TikTokMessage(
                                    type = "chat",
                                    data = MessageData(
                                        user = TikTokUser(
                                            userId = user.getString("userId"),
                                            nickname = user.getString("nickname"),
                                            profilePicture = user.optString("profilePicture")
                                        ),
                                        content = data.getString("content")
                                    )
                                )
                                messageChannel.trySend(message)
                                Timber.d("üí¨ –û–±—Ä–æ–±–ª–µ–Ω–æ —á–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${user.getString("nickname")}")
                            }
                            "gift" -> {
                                val data = json.getJSONObject("data")
                                val user = data.getJSONObject("user")
                                val message = TikTokMessage(
                                    type = "gift",
                                    data = MessageData(
                                        user = TikTokUser(
                                            userId = user.getString("userId"),
                                            nickname = user.getString("nickname"),
                                            profilePicture = user.optString("profilePicture")
                                        ),
                                        giftName = data.getString("giftName"),
                                        giftValue = data.getInt("diamondCount")
                                    )
                                )
                                messageChannel.trySend(message)
                                Timber.d("üéÅ –û–±—Ä–æ–±–ª–µ–Ω–æ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –≤—ñ–¥ ${user.getString("nickname")}")
                            }
                            "like" -> {
                                val data = json.getJSONObject("data")
                                val user = data.getJSONObject("user")
                                val message = TikTokMessage(
                                    type = "like",
                                    data = MessageData(
                                        user = TikTokUser(
                                            userId = user.getString("userId"),
                                            nickname = user.getString("nickname"),
                                            profilePicture = user.optString("profilePicture")
                                        ),
                                        likeCount = data.getInt("likeCount")
                                    )
                                )
                                messageChannel.trySend(message)
                                Timber.d("‚ù§Ô∏è –û–±—Ä–æ–±–ª–µ–Ω–æ –ª–∞–π–∫–∏ –≤—ñ–¥ ${user.getString("nickname")}")
                            }
                            else -> {
                                Timber.d("‚ÑπÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${json.getString("type")}")
                            }
                        }
                    } catch (e: Exception) {
                        Timber.e(e, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: $text")
                    }
                }

                override fun onFailure(webSocket: WebSocket, t: Throwable, response: Response?) {
                    Timber.e(t, "‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è. –ö–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response?.code}")
                }

                override fun onClosed(webSocket: WebSocket, code: Int, reason: String) {
                    Timber.d("üîí WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ. –ö–æ–¥: $code, –ø—Ä–∏—á–∏–Ω–∞: $reason")
                }

                override fun onClosing(webSocket: WebSocket, code: Int, reason: String) {
                    Timber.d("‚ö†Ô∏è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è. –ö–æ–¥: $code, –ø—Ä–∏—á–∏–Ω–∞: $reason")
                }
            })
        } catch (e: Exception) {
            Timber.e(e, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ TikTok Live")
            throw e
        }
    }

    override suspend fun disconnect() {
        try {
            Timber.d("üîÑ –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ TikTok Live")
            webSocket?.close(1000, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è")
            webSocket = null
            messageChannel.close()
            Timber.d("‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ TikTok Live")
        } catch (e: Exception) {
            Timber.e(e, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –≤—ñ–¥ TikTok Live")
            throw e
        }
    }
} 